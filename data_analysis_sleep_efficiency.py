# -*- coding: utf-8 -*-
"""Data_Analysis_Sleep_efficiency.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D-5dStMOfDr4vzV4ufp4l9RXsyhIzzqg
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/

!kaggle datasets download -d equilibriumm/sleep-efficiency

import zipfile
zip_ref = zipfile.ZipFile('/content/sleep-efficiency.zip','r')
zip_ref.extractall('/content')
zip_ref.close()

df = pd.read_csv('/content/Sleep_Efficiency.csv', index_col = 0)

df.head()

df.shape

df.info()

import pandas as pd

# Convert 'Bedtime' column to datetime
df['Bedtime'] = pd.to_datetime(df['Bedtime'])

# Convert 'Wakeup time' column to datetime
df['Wakeup time'] = pd.to_datetime(df['Wakeup time'])

# Extract hour and minute components from 'Bedtime' column
df['Bedtime_Hour'] = [x.time().hour for x in df['Bedtime']]
df['Bedtime_Minutes'] = [x.time().minute for x in df['Bedtime']]

# Extract hour and minute components from 'Wakeup time' column
df['Wakeup_Hour'] = [x.time().hour for x in df['Wakeup time']]
df['Wakeup_Minutes'] = [x.time().minute for x in df['Wakeup time']]

df.describe()

fig, ax = plt.subplots(7,2, figsize=(20,65))
idx = 0

features = ['Age', 'Sleep efficiency', 'REM sleep percentage',
            'Deep sleep percentage', 'Light sleep percentage', 'Awakenings',
            'Caffeine consumption']

for column in (features):
    sns.kdeplot(data=df, x=column, fill=True, ax=ax[idx][0]).set_title(f'Distribution of {column}', fontsize='12')
    sns.boxplot(data=df, x=column, orient='h', ax=ax[idx][1]).set_title(f'Box Plot of {column}', fontsize='12')
    idx +=1

plt.show()

fig, ax = plt.subplots(figsize = (15, 8))

sns.heatmap(data = df.corr(),
            annot = True,
            fmt = '.1f',
            linewidth = .5,
            vmax = 1,
            vmin = -1,
            cmap = 'viridis'
           )
plt.show()

imputer = SimpleImputer(strategy = "most_frequent")
df = pd.DataFrame(imputer.fit_transform(df), columns = df.columns)

"""**[Grading Sleep Categories](https://)**

Assigning Pass (1) or Fail (0) for each sleep measurement
Summing the score of all measurements to grade each person's sleep quality (0 = Poor, 5 = Great)
"""

# Define functions for grading criteria
def grade_sleep_duration(duration):
    return int(duration >= 7)

def grade_deep_sleep_percentage(percentage):
    return int(13 <= percentage <= 23)

def grade_light_sleep_percentage(percentage):
    return int(45 <= percentage <= 55)

def grade_awakenings(awakenings):
    return int(awakenings <= 1)

def grade_sleep_efficiency(efficiency):
    return int(efficiency >= 0.85)

# Apply grading functions to create grade columns
df['sleep_duration_grade'] = df['Sleep duration'].apply(grade_sleep_duration)
df['deep_sleep_grade'] = df['Deep sleep percentage'].apply(grade_deep_sleep_percentage)
df['light_sleep_grade'] = df['Light sleep percentage'].apply(grade_light_sleep_percentage)
df['awakenings_grade'] = df['Awakenings'].apply(grade_awakenings)
df['sleep_efficiency_grade'] = df['Sleep efficiency'].apply(grade_sleep_efficiency)

# Compute sleep quality score
df['sleep_quality'] = (
    df['sleep_duration_grade'] +
    df['deep_sleep_grade'] +
    df['light_sleep_grade'] +
    df['awakenings_grade'] +
    df['sleep_efficiency_grade']
)

"""**Distribution of Sleep Quality Scores**

No one achieved a perfect sleep quality score of 5
Most achieved a score of 3
"""

import matplotlib.pyplot as plt

# Plotting the distribution of sleep quality scores
plt.figure(figsize=(8, 6))
plt.hist(df['sleep_quality'], bins=range(1, 7), align='left', rwidth=0.8, color='skyblue', edgecolor='black')
plt.xlabel('Sleep Quality Score')
plt.ylabel('Frequency')
plt.title('Distribution of Sleep Quality Scores')
plt.xticks(range(1, 6))
plt.yticks(range(0, len(df) + 1, len(df) // 10))
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

